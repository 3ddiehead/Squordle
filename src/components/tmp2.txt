inv.js

//    const mousePos = props.mousePos;
//      const itemInfo = props.itemInfo; 

//    const haltInv = props.haltInv;

/*
    function selectItem(e)
    {
        var nodes = Array.prototype.slice.call(e.currentTarget.children);
        const item = nodes[0].name;
        const itemCount = JSON.parse(localStorage.inventory)[`${item}`];
    
    /*
        if (itemCount > 0 && 
            (!haltInv || item === "lemonade")) {  // test
            props.setItemInfo([item,
                              mousePos[0], 
                              mousePos[1],
                              1]);
        }
    }
*/

itemprev

/*
                <td className = {classes.draggable}
                    onClick = {selectItem}>
                    {item}
                </td>
*/
/*
            {isExpanded && (


            { !(itemInfo[0] === '') &&
                <div className = {classes.draggable}>
                    <img id = "draggable_item"
                         src = {require("../assets/" + itemInfo[0] + ".png")}
                         alt = "item for dragging"
                         style = {{cursor: "move",
                                   position: "absolute",
                                   top: String(itemInfo[1]) - 32 + "px",
                                   left: String(itemInfo[2]) - 32 + "px",
                                   zIndex: String(itemInfo[3])}}
                         onClick = {() => props.realize(itemInfo[0])}
                         decoding = "async"/>
                </div> }




            <table className = {classes.storage}>
                <tbody>
                <tr className = {classes.header}>
                    <th className = {classes.leftColumn}> Flavor </th>
                    <th className = {classes.header1}> Items </th>
                </tr>
                { isExpanded && itemPreview(items[0], '#F08030') } 
                { isExpanded && itemPreview(items[1], '#F85888') }
                { isExpanded && itemPreview(items[2], '#F8D030') }
                { isExpanded && itemPreview(items[3], '#6890F0') }
                </tbody>
            </table>

*/

shucklemex

//    const [haltInv, setHaltInv] = useState(false);

/*
    useEffect(() => {       
        setTimeout(() => {
            if (itemInfo[0] && !(realizeItem[0])) {
                setItemInfo([itemInfo[0], 
                            mousePos[0],    
                            mousePos[1], 
                            1]);  // poffin moving
            }
        }, 16);
    }, [itemInfo]);

    function realize(item)
    {
        let tempInv = JSON.parse(localStorage.inventory);
        const itemCount = tempInv[`${item}`];
        if (itemCount > 0) {
            tempInv[`${item}`] = itemCount - 1;
            localStorage.setItem("inventory", JSON.stringify(tempInv));
            setRealizeItem([true, Number(getPoffinId(itemInfo[0]))]);
            derealize();
        }
    }
    
    function derealize()
    {
        setItemInfo([itemInfo[0], 
                     itemInfo[1], 
                     itemInfo[2], 
                     0]); 
    }

*/

/*
            <Inventory
                itemInfo = {itemInfo} 
                setItemInfo = {setItemInfo}
                haltInv = {haltInv}
                setHaltInv = {setHaltInv}
                realize = {realize} 
            />
            <ShuckleCursor 
                mousePos = {mousePos}
                targetInfo = {itemInfo}
                realizeItem = {realizeItem}
                keyDownHandler = {props.keyDownHandler}
                haltInv = {haltInv}
                setHaltInv = {setHaltInv}
                reset = {reset} 
            />
*/
