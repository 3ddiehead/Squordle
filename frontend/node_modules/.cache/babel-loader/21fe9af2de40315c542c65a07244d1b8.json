{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Pokemon(props) {\n  const {\n    name,\n    gen,\n    id\n  } = props;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", props.name, \" + \", props.gen, \" \"]\n  }, void 0, true);\n}\n\n_c = Pokemon;\nexport default function PokemonList() {\n  _s();\n\n  const [pokemon, setPokemon] = useState([]);\n  /*\n  // method fetches records from db\n  useEffect(() => {\n      async function getPokemon() {\n          const response = await fetch(`http://localhost:3000/pokeList`);\n           if (!response.ok) {\n              const message = `An error occurred: ${response.statusText}`;\n              window.alert(message);\n              return;\n          }\n           const pokeList = await response.json();\n          console.log(typeof(response.json) + \" - \" + pokeList[0].Name);\n          setPokemon(pokeList);\n      }\n       getPokemon();\n      return;\n  }, []);\n  */\n\n  useEffect(() => {\n    async function getRandomPokemon() {\n      const response = await fetch(`http://localhost:3000/random`);\n\n      if (!response.ok) {\n        const message = `An error occurred: ${response.statusText}`;\n        window.alert(message);\n        return;\n      }\n\n      const pokemon = await response.json();\n      console.log(\"pokeAPI - \" + pokemon[0].Name);\n      setPokemon(pokemon);\n    }\n\n    getRandomPokemon();\n    return;\n  }, []);\n  /*\n  function pokemonList() {\n      return pokemon.map((poke) => {\n          return (\n              <Pokemon \n                  name={poke.Name}\n                  gen={poke.Generation}\n                  key={poke._id}\n              />\n          );\n      });\n  }\n  */\n\n  /*\n  return (\n      <> {pokemonList()} </>\n  );\n  */\n}\n\n_s(PokemonList, \"4D0jkhGq0ZINAQVoOiMhL4+r3a8=\");\n\n_c2 = PokemonList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Pokemon\");\n$RefreshReg$(_c2, \"PokemonList\");","map":{"version":3,"names":["React","useEffect","useState","Link","Pokemon","props","name","gen","id","PokemonList","pokemon","setPokemon","getRandomPokemon","response","fetch","ok","message","statusText","window","alert","json","console","log","Name"],"sources":["/Users/eddie/Documents/GitHub/Squordle/frontend/src/components/PokeAPI.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Pokemon(props)\n{\n    const {name, gen, id} = props;\n    \n    return (\n        <> {props.name} + {props.gen} </>\n    );\n}\n\nexport default function PokemonList() {\n    const [pokemon, setPokemon] = useState([]);\n\n    /*\n    // method fetches records from db\n    useEffect(() => {\n        async function getPokemon() {\n            const response = await fetch(`http://localhost:3000/pokeList`);\n\n            if (!response.ok) {\n                const message = `An error occurred: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n\n            const pokeList = await response.json();\n            console.log(typeof(response.json) + \" - \" + pokeList[0].Name);\n            setPokemon(pokeList);\n        }\n\n        getPokemon();\n        return;\n    }, []);\n    */\n\n    useEffect(() => {\n        async function getRandomPokemon() {\n            const response = await fetch(`http://localhost:3000/random`);\n\n            if (!response.ok) {\n                const message = `An error occurred: ${response.statusText}`;\n                window.alert(message);\n                return;\n            }\n\n            const pokemon = await response.json();\n            console.log(\"pokeAPI - \" + pokemon[0].Name);\n            setPokemon(pokemon);\n        }\n\n        getRandomPokemon();\n        return;\n    }, []);\n\n    /*\n    function pokemonList() {\n        return pokemon.map((poke) => {\n            return (\n                <Pokemon \n                    name={poke.Name}\n                    gen={poke.Generation}\n                    key={poke._id}\n                />\n            );\n        });\n    }\n    */\n\n    /*\n    return (\n        <> {pokemonList()} </>\n    );\n    */\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EACA;EACI,MAAM;IAACC,IAAD;IAAOC,GAAP;IAAYC;EAAZ,IAAkBH,KAAxB;EAEA,oBACI;IAAA,gBAAIA,KAAK,CAACC,IAAV,SAAmBD,KAAK,CAACE,GAAzB;EAAA,gBADJ;AAGH;;KAPQH,O;AAST,eAAe,SAASK,WAAT,GAAuB;EAAA;;EAClC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAKID,SAAS,CAAC,MAAM;IACZ,eAAeW,gBAAf,GAAkC;MAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,8BAAF,CAA5B;;MAEA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;QACd,MAAMC,OAAO,GAAI,sBAAqBH,QAAQ,CAACI,UAAW,EAA1D;QACAC,MAAM,CAACC,KAAP,CAAaH,OAAb;QACA;MACH;;MAED,MAAMN,OAAO,GAAG,MAAMG,QAAQ,CAACO,IAAT,EAAtB;MACAC,OAAO,CAACC,GAAR,CAAY,eAAeZ,OAAO,CAAC,CAAD,CAAP,CAAWa,IAAtC;MACAZ,UAAU,CAACD,OAAD,CAAV;IACH;;IAEDE,gBAAgB;IAChB;EACH,CAjBQ,EAiBN,EAjBM,CAAT;EAmBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACC;;GA/DuBH,W;;MAAAA,W"},"metadata":{},"sourceType":"module"}